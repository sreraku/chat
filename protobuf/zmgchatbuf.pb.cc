// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zmgchatbuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chat {

namespace {

const ::google::protobuf::Descriptor* zMQChatBuf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zMQChatBuf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zmgchatbuf_2eproto() {
  protobuf_AddDesc_zmgchatbuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zmgchatbuf.proto");
  GOOGLE_CHECK(file != NULL);
  zMQChatBuf_descriptor_ = file->message_type(0);
  static const int zMQChatBuf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zMQChatBuf, chatstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zMQChatBuf, clientinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zMQChatBuf, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zMQChatBuf, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zMQChatBuf, time_),
  };
  zMQChatBuf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      zMQChatBuf_descriptor_,
      zMQChatBuf::default_instance_,
      zMQChatBuf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zMQChatBuf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zMQChatBuf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(zMQChatBuf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zmgchatbuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    zMQChatBuf_descriptor_, &zMQChatBuf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zmgchatbuf_2eproto() {
  delete zMQChatBuf::default_instance_;
  delete zMQChatBuf_reflection_;
}

void protobuf_AddDesc_zmgchatbuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020zmgchatbuf.proto\022\004chat\"d\n\nzMQChatBuf\022\022"
    "\n\nchatString\030\001 \001(\t\022\022\n\nclientInfo\030\002 \001(\t\022\020"
    "\n\010clientId\030\003 \001(\005\022\016\n\006status\030\004 \001(\005\022\014\n\004time"
    "\030\005 \001(\t", 126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zmgchatbuf.proto", &protobuf_RegisterTypes);
  zMQChatBuf::default_instance_ = new zMQChatBuf();
  zMQChatBuf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zmgchatbuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zmgchatbuf_2eproto {
  StaticDescriptorInitializer_zmgchatbuf_2eproto() {
    protobuf_AddDesc_zmgchatbuf_2eproto();
  }
} static_descriptor_initializer_zmgchatbuf_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int zMQChatBuf::kChatStringFieldNumber;
const int zMQChatBuf::kClientInfoFieldNumber;
const int zMQChatBuf::kClientIdFieldNumber;
const int zMQChatBuf::kStatusFieldNumber;
const int zMQChatBuf::kTimeFieldNumber;
#endif  // !_MSC_VER

zMQChatBuf::zMQChatBuf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void zMQChatBuf::InitAsDefaultInstance() {
}

zMQChatBuf::zMQChatBuf(const zMQChatBuf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void zMQChatBuf::SharedCtor() {
  _cached_size_ = 0;
  chatstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = 0;
  status_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

zMQChatBuf::~zMQChatBuf() {
  SharedDtor();
}

void zMQChatBuf::SharedDtor() {
  if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
    delete chatstring_;
  }
  if (clientinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete clientinfo_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void zMQChatBuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zMQChatBuf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zMQChatBuf_descriptor_;
}

const zMQChatBuf& zMQChatBuf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmgchatbuf_2eproto();  return *default_instance_;
}

zMQChatBuf* zMQChatBuf::default_instance_ = NULL;

zMQChatBuf* zMQChatBuf::New() const {
  return new zMQChatBuf;
}

void zMQChatBuf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatstring()) {
      if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
        chatstring_->clear();
      }
    }
    if (has_clientinfo()) {
      if (clientinfo_ != &::google::protobuf::internal::kEmptyString) {
        clientinfo_->clear();
      }
    }
    clientid_ = 0;
    status_ = 0;
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool zMQChatBuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string chatString = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatstring().data(), this->chatstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientInfo;
        break;
      }
      
      // optional string clientInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientinfo().data(), this->clientinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientId;
        break;
      }
      
      // optional int32 clientId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }
      
      // optional string time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void zMQChatBuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string chatString = 1;
  if (has_chatstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatstring().data(), this->chatstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chatstring(), output);
  }
  
  // optional string clientInfo = 2;
  if (has_clientinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientinfo().data(), this->clientinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clientinfo(), output);
  }
  
  // optional int32 clientId = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clientid(), output);
  }
  
  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }
  
  // optional string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* zMQChatBuf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string chatString = 1;
  if (has_chatstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatstring().data(), this->chatstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatstring(), target);
  }
  
  // optional string clientInfo = 2;
  if (has_clientinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientinfo().data(), this->clientinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientinfo(), target);
  }
  
  // optional int32 clientId = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clientid(), target);
  }
  
  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }
  
  // optional string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int zMQChatBuf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string chatString = 1;
    if (has_chatstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatstring());
    }
    
    // optional string clientInfo = 2;
    if (has_clientinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientinfo());
    }
    
    // optional int32 clientId = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientid());
    }
    
    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional string time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zMQChatBuf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const zMQChatBuf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const zMQChatBuf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void zMQChatBuf::MergeFrom(const zMQChatBuf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatstring()) {
      set_chatstring(from.chatstring());
    }
    if (from.has_clientinfo()) {
      set_clientinfo(from.clientinfo());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void zMQChatBuf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zMQChatBuf::CopyFrom(const zMQChatBuf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zMQChatBuf::IsInitialized() const {
  
  return true;
}

void zMQChatBuf::Swap(zMQChatBuf* other) {
  if (other != this) {
    std::swap(chatstring_, other->chatstring_);
    std::swap(clientinfo_, other->clientinfo_);
    std::swap(clientid_, other->clientid_);
    std::swap(status_, other->status_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata zMQChatBuf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zMQChatBuf_descriptor_;
  metadata.reflection = zMQChatBuf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)
