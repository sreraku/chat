// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zmgchatbuf.proto

#ifndef PROTOBUF_zmgchatbuf_2eproto__INCLUDED
#define PROTOBUF_zmgchatbuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace chat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zmgchatbuf_2eproto();
void protobuf_AssignDesc_zmgchatbuf_2eproto();
void protobuf_ShutdownFile_zmgchatbuf_2eproto();

class zMQChatBuf;

// ===================================================================

class zMQChatBuf : public ::google::protobuf::Message {
 public:
  zMQChatBuf();
  virtual ~zMQChatBuf();
  
  zMQChatBuf(const zMQChatBuf& from);
  
  inline zMQChatBuf& operator=(const zMQChatBuf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const zMQChatBuf& default_instance();
  
  void Swap(zMQChatBuf* other);
  
  // implements Message ----------------------------------------------
  
  zMQChatBuf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const zMQChatBuf& from);
  void MergeFrom(const zMQChatBuf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string chatString = 1;
  inline bool has_chatstring() const;
  inline void clear_chatstring();
  static const int kChatStringFieldNumber = 1;
  inline const ::std::string& chatstring() const;
  inline void set_chatstring(const ::std::string& value);
  inline void set_chatstring(const char* value);
  inline void set_chatstring(const char* value, size_t size);
  inline ::std::string* mutable_chatstring();
  inline ::std::string* release_chatstring();
  
  // optional string clientInfo = 2;
  inline bool has_clientinfo() const;
  inline void clear_clientinfo();
  static const int kClientInfoFieldNumber = 2;
  inline const ::std::string& clientinfo() const;
  inline void set_clientinfo(const ::std::string& value);
  inline void set_clientinfo(const char* value);
  inline void set_clientinfo(const char* value, size_t size);
  inline ::std::string* mutable_clientinfo();
  inline ::std::string* release_clientinfo();
  
  // optional int32 clientId = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 3;
  inline ::google::protobuf::int32 clientid() const;
  inline void set_clientid(::google::protobuf::int32 value);
  
  // optional int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional string time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  
  // @@protoc_insertion_point(class_scope:chat.zMQChatBuf)
 private:
  inline void set_has_chatstring();
  inline void clear_has_chatstring();
  inline void set_has_clientinfo();
  inline void clear_has_clientinfo();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* chatstring_;
  ::std::string* clientinfo_;
  ::google::protobuf::int32 clientid_;
  ::google::protobuf::int32 status_;
  ::std::string* time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_zmgchatbuf_2eproto();
  friend void protobuf_AssignDesc_zmgchatbuf_2eproto();
  friend void protobuf_ShutdownFile_zmgchatbuf_2eproto();
  
  void InitAsDefaultInstance();
  static zMQChatBuf* default_instance_;
};
// ===================================================================


// ===================================================================

// zMQChatBuf

// optional string chatString = 1;
inline bool zMQChatBuf::has_chatstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void zMQChatBuf::set_has_chatstring() {
  _has_bits_[0] |= 0x00000001u;
}
inline void zMQChatBuf::clear_has_chatstring() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void zMQChatBuf::clear_chatstring() {
  if (chatstring_ != &::google::protobuf::internal::kEmptyString) {
    chatstring_->clear();
  }
  clear_has_chatstring();
}
inline const ::std::string& zMQChatBuf::chatstring() const {
  return *chatstring_;
}
inline void zMQChatBuf::set_chatstring(const ::std::string& value) {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  chatstring_->assign(value);
}
inline void zMQChatBuf::set_chatstring(const char* value) {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  chatstring_->assign(value);
}
inline void zMQChatBuf::set_chatstring(const char* value, size_t size) {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  chatstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zMQChatBuf::mutable_chatstring() {
  set_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    chatstring_ = new ::std::string;
  }
  return chatstring_;
}
inline ::std::string* zMQChatBuf::release_chatstring() {
  clear_has_chatstring();
  if (chatstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chatstring_;
    chatstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string clientInfo = 2;
inline bool zMQChatBuf::has_clientinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void zMQChatBuf::set_has_clientinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void zMQChatBuf::clear_has_clientinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void zMQChatBuf::clear_clientinfo() {
  if (clientinfo_ != &::google::protobuf::internal::kEmptyString) {
    clientinfo_->clear();
  }
  clear_has_clientinfo();
}
inline const ::std::string& zMQChatBuf::clientinfo() const {
  return *clientinfo_;
}
inline void zMQChatBuf::set_clientinfo(const ::std::string& value) {
  set_has_clientinfo();
  if (clientinfo_ == &::google::protobuf::internal::kEmptyString) {
    clientinfo_ = new ::std::string;
  }
  clientinfo_->assign(value);
}
inline void zMQChatBuf::set_clientinfo(const char* value) {
  set_has_clientinfo();
  if (clientinfo_ == &::google::protobuf::internal::kEmptyString) {
    clientinfo_ = new ::std::string;
  }
  clientinfo_->assign(value);
}
inline void zMQChatBuf::set_clientinfo(const char* value, size_t size) {
  set_has_clientinfo();
  if (clientinfo_ == &::google::protobuf::internal::kEmptyString) {
    clientinfo_ = new ::std::string;
  }
  clientinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zMQChatBuf::mutable_clientinfo() {
  set_has_clientinfo();
  if (clientinfo_ == &::google::protobuf::internal::kEmptyString) {
    clientinfo_ = new ::std::string;
  }
  return clientinfo_;
}
inline ::std::string* zMQChatBuf::release_clientinfo() {
  clear_has_clientinfo();
  if (clientinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientinfo_;
    clientinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 clientId = 3;
inline bool zMQChatBuf::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void zMQChatBuf::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void zMQChatBuf::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void zMQChatBuf::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
inline ::google::protobuf::int32 zMQChatBuf::clientid() const {
  return clientid_;
}
inline void zMQChatBuf::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
}

// optional int32 status = 4;
inline bool zMQChatBuf::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void zMQChatBuf::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void zMQChatBuf::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void zMQChatBuf::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 zMQChatBuf::status() const {
  return status_;
}
inline void zMQChatBuf::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string time = 5;
inline bool zMQChatBuf::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void zMQChatBuf::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void zMQChatBuf::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void zMQChatBuf::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& zMQChatBuf::time() const {
  return *time_;
}
inline void zMQChatBuf::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void zMQChatBuf::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void zMQChatBuf::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* zMQChatBuf::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* zMQChatBuf::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zmgchatbuf_2eproto__INCLUDED
